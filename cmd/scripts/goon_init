#!/usr/bin/env bash

if [ -n "$DEBUG" ]; then
 set -x
fi

fail() {
    echo >&2 "fail:" "$@" 
    exit 1
}

usage() {
    echo >&2 goon init REPO_NAME TEMPLATE_DIR
    exit 1
}

command -v cobra-cli >/dev/null 2>&1 || fail "cobra-cli not found.  (go install github.com/spf13/cobra-cli@latest)"
command -v cobra-doc >/dev/null 2>&1 || fail "cobra-doc not found. (go install github.com/rstms/cobra-doc@latest)"

tmpfile=$(mktemp)
cleanup() {
    if [ -n "$tmpfile" ]; then
	if [ -e "$tmpfile" ]; then
	    rm $tmpfile
	fi
    fi
}
trap cleanup EXIT

awkEdit() {
    cp $1 $tmpfile
    awk "$2" <$tmpfile >$1
}

addOptionFlag() {
    filename=$1
    name=$2
    flag=$3
    description=$4
    export OPTION="OptionSwitch(rootCmd, \"${name}\", \"${flag}\", \"${description}\")"
    awkEdit $filename '/cobra.OnInitialize/{printf("%s\n%s\n", $0, ENVIRON["OPTION"]); next;}{print}'
}

addOptionString() {
    filename=$1
    name=$2
    flag=$3
    default=$4
    description=$5
    export OPTION="OptionString(rootCmd, \"${name}\", \"${flag}\", \"${default}\", \"${description}\")"
    awkEdit $filename '/cobra.OnInitialize/{printf("%s\n%s\n", $0, ENVIRON["OPTION"]); next;}{print}'
}


[ -n "$GH_ORG" ] || fail GH_ORG unset
[ -n "$1" ] || usage
[ -n "$2" ] || usage

export repo=$1
export repo_template=$2

repo_home=~/go/src/github.com/$GH_ORG
repo_root=$repo_home/$repo

if [ -n "$VERBOSE" ]; then
    echo "repo=$repo"
    echo "repo_template=$repo"
    echo "repo_home=$repo"
    echo "repo_root=$repo"
fi

if [ -d "$repo_root" ]; then
    fail "repo exists"
fi

mkdir $repo_root
cd $repo_root

echo "# $repo" >README.md
echo "0.0.1" >VERSION
echo "alias $repo=./$repo" >.postactivate
chmod +x .postactivate

echo "$repo" >.gitignore
echo "${repo}.exe" >>.gitignore
cat $repo_template/dot_gitignore >>.gitignore
cp $repo_template/dot_bumpversion.cfg .bumpversion.cfg
cp $repo_template/Makefile .
mkdir make
cp $repo_template/common.mk make

find_go_bins() {
    echo $PATH | sed 's/[cC]:/\/c\//' | tr ':' '\n' | \
    while read dir; do
	if [ -d "$dir" ]; then
	    find 2>/dev/null "$dir" -type f | grep 'go.exe'
	fi
    done
}

find_go_versions() {
    find_go_bins | while read bin; do
	"$bin" version | cut -d' ' -f 3
    done
}

# init with latest installed go version
go_version=$(find_go_versions | sort -V | tail -1)
if [ ! $go_version >/dev/null 2>&1 ]; then 
    go_version=go
fi
go mod init
cobra-cli init

cp $repo_template/main_test_go main_test.go
cp $repo_template/root_test_go cmd/root_test.go

###############################################################################
#
# edit cmd/root.go
#
###############################################################################

awkEdit cmd/root.go '/Use:/{printf("%s\n%s\n", "Version: \"0.0.1\",", $0);next}{print}'
awkEdit cmd/root.go '/toggle/{next}{print}'
awkEdit cmd/root.go '/rootCmd.PersistentFlags/{next}{print}'
awkEdit cmd/root.go '/github.com\/spf13\/viper/{next}{print}'
awkEdit cmd/root.go '/^[[:space:]]*"fmt"[[:space:]]*$/{next} {print}'
awkEdit cmd/root.go '{gsub(/cobra.OnInitialize\(initConfig\)/, "CobraInit(rootCmd)"); print}'
awkEdit cmd/root.go '/^func initConfig/{exit} {print}'


###############################################################################
#
# add cmd/common.go
#
###############################################################################

curl -sLo cmd/common.go https://raw.githubusercontent.com/rstms/go-common/master/proxy_common_go


###############################################################################
#
# edit cmd/root_test.go
# 
###############################################################################
awkEdit cmd/root_test.go '/^package main/{print "package cmd"; next} /^func TestMain/{gsub(/TestMain/, "TestRoot"); print; next}{print}'


###############################################################################
#
# create testdata and test configs
#
###############################################################################
mkdir testdata
echo -e "$repo:\n  verbose: true" > testdata/config.yaml
mkdir cmd/testdata
echo -e "$repo:\n  verbose: true" > cmd/testdata/config.yaml

###############################################################################
#
# initial go build
#
###############################################################################
go mod tidy
git init 
gmake update
gmake

###############################################################################
#
# initial git commit
#
###############################################################################
cobra-doc clean all
git add .
git commit -m "initial commit"
