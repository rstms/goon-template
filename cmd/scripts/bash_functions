
if declare -F is_function >/dev/null; then :; else
    is_function() { declare -F "$1" >/dev/null; }
fi

if is_function "ungoon"; then :; else
ungoon() {
    if [ -n "$PROJECT_DIR" ]; then
	export TMUX_WINDOW_NAME=$(hostname 2>/dev/null -s || hostname)
	unalias $(basename $PROJECT_DIR)
	unset PROJECT_DIR
    fi
    cd
}
fi

if is_function "cdg"; then :; else
cdg() {
    if (( $# == 0 )); then
	if [ -d "$PROJECT_DIR" ]; then
	    export TMUX_WINDOW_NAME=$(basename $PROJECT_DIR)
	fi
    else
	if [ -d "$1" ]; then
	    export PROJECT_DIR="$1"
	    export TMUX_WINDOW_NAME="$(basename $1)"
	else
	    local _parent="$(dirname $1)"
	    local _name="$(basename $1)"
	    local _dir="$(find "$_parent" -type d -name "${_name}*" | head -1)"
	    if [ -d "$_dir" ]; then
		export PROJECT_DIR="$_dir"
		export TMUX_WINDOW_NAME="$(basename $1)"
	    else
		ungoon
	    fi
	fi
    fi
    cd $PROJECT_DIR
    [ -r ./postactivate ] && . ./postactivate
    [ -r ./.postactivate ] && . ./.postactivate
}
fi

if is_function "find_go_bins"; then :; else
find_go_bins() {
    echo $PATH | sed 's/[cC]:/\/c\//' | tr ':' '\n' | \
    while read dir; do
	if [ -d "$dir" ]; then
	    find 2>/dev/null "$dir" -type f | grep 'go.exe'
	fi
    done
}
fi

if is_function "find_go_versions"; then :; else
find_go_versions() {
    find_go_bins | while read bin; do
	"$bin" version | cut -d' ' -f 3
    done
}
fi

if is_function "goon"; then :; else
goon() {
  cd $GOPATH/src/github.com/rstms
  if (( $# < 1 )); then
    ls -1 . 
  else
    if [ $1 = '.' ]; then
      ungoon
    else 
      case ${1} in 
	init) 
	    ~/go/bin/goon-template init ${2} 
	    cdg ${2}
	;;
	versions) find_go_versions | sort -V ;;
	template) shift && goon-template "$@" ;;
	*)
	    if [ -d ${1} ]; then
		cdg ${1}
	    else
		compgen -f -- "${1}"
	    fi
	;;
      esac
    fi
  fi
}
complete -f goon
fi

